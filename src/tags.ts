import { HTMLElementAttributes, RendrAttributes, SVGElementAttributes, element } from './elem';

// SVG Elements
export let svg = <Attrs extends RendrAttributes & SVGElementAttributes<'svg'>>(attrs?: Attrs) => element('svg', attrs);
export let rect = <Attrs extends RendrAttributes & SVGElementAttributes<'rect'>>(attrs?: Attrs) => element('rect', attrs);
export let animate = <Attrs extends RendrAttributes & SVGElementAttributes<'animate'>>(attrs?: Attrs) => element('animate', attrs);
export let animateMotion = <Attrs extends RendrAttributes & SVGElementAttributes<'animateMotion'>>(attrs?: Attrs) => element('animateMotion', attrs);
export let animateTransform = <Attrs extends RendrAttributes & SVGElementAttributes<'animateTransform'>>(attrs?: Attrs) => element('animateTransform', attrs);
export let circle = <Attrs extends RendrAttributes & SVGElementAttributes<'circle'>>(attrs?: Attrs) => element('circle', attrs);
export let clipPath = <Attrs extends RendrAttributes & SVGElementAttributes<'clipPath'>>(attrs?: Attrs) => element('clipPath', attrs);
export let defs = <Attrs extends RendrAttributes & SVGElementAttributes<'defs'>>(attrs?: Attrs) => element('defs', attrs);
export let desc = <Attrs extends RendrAttributes & SVGElementAttributes<'desc'>>(attrs?: Attrs) => element('desc', attrs);
export let ellipse = <Attrs extends RendrAttributes & SVGElementAttributes<'ellipse'>>(attrs?: Attrs) => element('ellipse', attrs);
export let feBlend = <Attrs extends RendrAttributes & SVGElementAttributes<'feBlend'>>(attrs?: Attrs) => element('feBlend', attrs);
export let feColorMatrix = <Attrs extends RendrAttributes & SVGElementAttributes<'feColorMatrix'>>(attrs?: Attrs) => element('feColorMatrix', attrs);
export let feComponentTransfer = <Attrs extends RendrAttributes & SVGElementAttributes<'feComponentTransfer'>>(attrs?: Attrs) => element('feComponentTransfer', attrs);
export let feComposite = <Attrs extends RendrAttributes & SVGElementAttributes<'feComposite'>>(attrs?: Attrs) => element('feComposite', attrs);
export let feConvolveMatrix = <Attrs extends RendrAttributes & SVGElementAttributes<'feConvolveMatrix'>>(attrs?: Attrs) => element('feConvolveMatrix', attrs);
export let feDiffuseLighting = <Attrs extends RendrAttributes & SVGElementAttributes<'feDiffuseLighting'>>(attrs?: Attrs) => element('feDiffuseLighting', attrs);
export let feDisplacementMap = <Attrs extends RendrAttributes & SVGElementAttributes<'feDisplacementMap'>>(attrs?: Attrs) => element('feDisplacementMap', attrs);
export let feDistantLight = <Attrs extends RendrAttributes & SVGElementAttributes<'feDistantLight'>>(attrs?: Attrs) => element('feDistantLight', attrs);
export let feDropShadow = <Attrs extends RendrAttributes & SVGElementAttributes<'feDropShadow'>>(attrs?: Attrs) => element('feDropShadow', attrs);
export let feFlood = <Attrs extends RendrAttributes & SVGElementAttributes<'feFlood'>>(attrs?: Attrs) => element('feFlood', attrs);
export let feFuncA = <Attrs extends RendrAttributes & SVGElementAttributes<'feFuncA'>>(attrs?: Attrs) => element('feFuncA', attrs);
export let feFuncB = <Attrs extends RendrAttributes & SVGElementAttributes<'feFuncB'>>(attrs?: Attrs) => element('feFuncB', attrs);
export let feFuncG = <Attrs extends RendrAttributes & SVGElementAttributes<'feFuncG'>>(attrs?: Attrs) => element('feFuncG', attrs);
export let feFuncR = <Attrs extends RendrAttributes & SVGElementAttributes<'feFuncR'>>(attrs?: Attrs) => element('feFuncR', attrs);
export let feGaussianBlur = <Attrs extends RendrAttributes & SVGElementAttributes<'feGaussianBlur'>>(attrs?: Attrs) => element('feGaussianBlur', attrs);
export let feImage = <Attrs extends RendrAttributes & SVGElementAttributes<'feImage'>>(attrs?: Attrs) => element('feImage', attrs);
export let feMerge = <Attrs extends RendrAttributes & SVGElementAttributes<'feMerge'>>(attrs?: Attrs) => element('feMerge', attrs);
export let feMergeNode = <Attrs extends RendrAttributes & SVGElementAttributes<'feMergeNode'>>(attrs?: Attrs) => element('feMergeNode', attrs);
export let feMorphology = <Attrs extends RendrAttributes & SVGElementAttributes<'feMorphology'>>(attrs?: Attrs) => element('feMorphology', attrs);
export let feOffset = <Attrs extends RendrAttributes & SVGElementAttributes<'feOffset'>>(attrs?: Attrs) => element('feOffset', attrs);
export let fePointLight = <Attrs extends RendrAttributes & SVGElementAttributes<'fePointLight'>>(attrs?: Attrs) => element('fePointLight', attrs);
export let feSpecularLighting = <Attrs extends RendrAttributes & SVGElementAttributes<'feSpecularLighting'>>(attrs?: Attrs) => element('feSpecularLighting', attrs);
export let feSpotLight = <Attrs extends RendrAttributes & SVGElementAttributes<'feSpotLight'>>(attrs?: Attrs) => element('feSpotLight', attrs);
export let feTile = <Attrs extends RendrAttributes & SVGElementAttributes<'feTile'>>(attrs?: Attrs) => element('feTile', attrs);
export let feTurbulence = <Attrs extends RendrAttributes & SVGElementAttributes<'feTurbulence'>>(attrs?: Attrs) => element('feTurbulence', attrs);
export let filter = <Attrs extends RendrAttributes & SVGElementAttributes<'filter'>>(attrs?: Attrs) => element('filter', attrs);
export let foreignObject = <Attrs extends RendrAttributes & SVGElementAttributes<'foreignObject'>>(attrs?: Attrs) => element('foreignObject', attrs);
export let g = <Attrs extends RendrAttributes & SVGElementAttributes<'g'>>(attrs?: Attrs) => element('g', attrs);
export let image = <Attrs extends RendrAttributes & SVGElementAttributes<'image'>>(attrs?: Attrs) => element('image', attrs);
export let line = <Attrs extends RendrAttributes & SVGElementAttributes<'line'>>(attrs?: Attrs) => element('line', attrs);
export let linearGradient = <Attrs extends RendrAttributes & SVGElementAttributes<'linearGradient'>>(attrs?: Attrs) => element('linearGradient', attrs);
export let marker = <Attrs extends RendrAttributes & SVGElementAttributes<'marker'>>(attrs?: Attrs) => element('marker', attrs);
export let mask = <Attrs extends RendrAttributes & SVGElementAttributes<'mask'>>(attrs?: Attrs) => element('mask', attrs);
export let metadata = <Attrs extends RendrAttributes & SVGElementAttributes<'metadata'>>(attrs?: Attrs) => element('metadata', attrs);
export let mpath = <Attrs extends RendrAttributes & SVGElementAttributes<'mpath'>>(attrs?: Attrs) => element('mpath', attrs);
export let path = <Attrs extends RendrAttributes & SVGElementAttributes<'path'>>(attrs?: Attrs) => element('path', attrs);
export let pattern = <Attrs extends RendrAttributes & SVGElementAttributes<'pattern'>>(attrs?: Attrs) => element('pattern', attrs);
export let polygon = <Attrs extends RendrAttributes & SVGElementAttributes<'polygon'>>(attrs?: Attrs) => element('polygon', attrs);
export let polyline = <Attrs extends RendrAttributes & SVGElementAttributes<'polyline'>>(attrs?: Attrs) => element('polyline', attrs);
export let radialGradient = <Attrs extends RendrAttributes & SVGElementAttributes<'radialGradient'>>(attrs?: Attrs) => element('radialGradient', attrs);
export let script = <Attrs extends RendrAttributes & SVGElementAttributes<'script'>>(attrs?: Attrs) => element('script', attrs);
export let set = <Attrs extends RendrAttributes & SVGElementAttributes<'set'>>(attrs?: Attrs) => element('set', attrs);
export let stop = <Attrs extends RendrAttributes & SVGElementAttributes<'stop'>>(attrs?: Attrs) => element('stop', attrs);
export let style = <Attrs extends RendrAttributes & SVGElementAttributes<'style'>>(attrs?: Attrs) => element('style', attrs);
export let symbol = <Attrs extends RendrAttributes & SVGElementAttributes<'symbol'>>(attrs?: Attrs) => element('symbol', attrs);
export let text = <Attrs extends RendrAttributes & SVGElementAttributes<'text'>>(attrs?: Attrs) => element('text', attrs);
export let textPath = <Attrs extends RendrAttributes & SVGElementAttributes<'textPath'>>(attrs?: Attrs) => element('textPath', attrs);
export let title = <Attrs extends RendrAttributes & SVGElementAttributes<'title'>>(attrs?: Attrs) => element('title', attrs);
export let tspan = <Attrs extends RendrAttributes & SVGElementAttributes<'tspan'>>(attrs?: Attrs) => element('tspan', attrs);
export let use = <Attrs extends RendrAttributes & SVGElementAttributes<'use'>>(attrs?: Attrs) => element('use', attrs);
export let view = <Attrs extends RendrAttributes & SVGElementAttributes<'view'>>(attrs?: Attrs) => element('view', attrs);

// HTML elements
export let a = <Attrs extends RendrAttributes & HTMLElementAttributes<'a'>>(attrs?: Attrs) => element('a', attrs);
export let b = <Attrs extends RendrAttributes & HTMLElementAttributes<'b'>>(attrs?: Attrs) => element('b', attrs);
export let i = <Attrs extends RendrAttributes & HTMLElementAttributes<'i'>>(attrs?: Attrs) => element('i', attrs);
export let p = <Attrs extends RendrAttributes & HTMLElementAttributes<'p'>>(attrs?: Attrs) => element('p', attrs);
export let q = <Attrs extends RendrAttributes & HTMLElementAttributes<'q'>>(attrs?: Attrs) => element('q', attrs);
export let s = <Attrs extends RendrAttributes & HTMLElementAttributes<'s'>>(attrs?: Attrs) => element('s', attrs);
export let br = <Attrs extends RendrAttributes & HTMLElementAttributes<'br'>>(attrs?: Attrs) => element('br', attrs);
export let dd = <Attrs extends RendrAttributes & HTMLElementAttributes<'dd'>>(attrs?: Attrs) => element('dd', attrs);
export let dl = <Attrs extends RendrAttributes & HTMLElementAttributes<'dl'>>(attrs?: Attrs) => element('dl', attrs);
export let dt = <Attrs extends RendrAttributes & HTMLElementAttributes<'dt'>>(attrs?: Attrs) => element('dt', attrs);
export let em = <Attrs extends RendrAttributes & HTMLElementAttributes<'em'>>(attrs?: Attrs) => element('em', attrs);
export let h1 = <Attrs extends RendrAttributes & HTMLElementAttributes<'h1'>>(attrs?: Attrs) => element('h1', attrs);
export let h2 = <Attrs extends RendrAttributes & HTMLElementAttributes<'h2'>>(attrs?: Attrs) => element('h2', attrs);
export let h3 = <Attrs extends RendrAttributes & HTMLElementAttributes<'h3'>>(attrs?: Attrs) => element('h3', attrs);
export let h4 = <Attrs extends RendrAttributes & HTMLElementAttributes<'h4'>>(attrs?: Attrs) => element('h4', attrs);
export let h5 = <Attrs extends RendrAttributes & HTMLElementAttributes<'h5'>>(attrs?: Attrs) => element('h5', attrs);
export let h6 = <Attrs extends RendrAttributes & HTMLElementAttributes<'h6'>>(attrs?: Attrs) => element('h6', attrs);
export let hr = <Attrs extends RendrAttributes & HTMLElementAttributes<'hr'>>(attrs?: Attrs) => element('hr', attrs);
export let li = <Attrs extends RendrAttributes & HTMLElementAttributes<'li'>>(attrs?: Attrs) => element('li', attrs);
export let ol = <Attrs extends RendrAttributes & HTMLElementAttributes<'ol'>>(attrs?: Attrs) => element('ol', attrs);
export let rp = <Attrs extends RendrAttributes & HTMLElementAttributes<'rp'>>(attrs?: Attrs) => element('rp', attrs);
export let rt = <Attrs extends RendrAttributes & HTMLElementAttributes<'rt'>>(attrs?: Attrs) => element('rt', attrs);
export let td = <Attrs extends RendrAttributes & HTMLElementAttributes<'td'>>(attrs?: Attrs) => element('td', attrs);
export let th = <Attrs extends RendrAttributes & HTMLElementAttributes<'th'>>(attrs?: Attrs) => element('th', attrs);
export let tr = <Attrs extends RendrAttributes & HTMLElementAttributes<'tr'>>(attrs?: Attrs) => element('tr', attrs);
export let ul = <Attrs extends RendrAttributes & HTMLElementAttributes<'ul'>>(attrs?: Attrs) => element('ul', attrs);
export let bdi = <Attrs extends RendrAttributes & HTMLElementAttributes<'bdi'>>(attrs?: Attrs) => element('bdi', attrs);
export let bdo = <Attrs extends RendrAttributes & HTMLElementAttributes<'bdo'>>(attrs?: Attrs) => element('bdo', attrs);
export let col = <Attrs extends RendrAttributes & HTMLElementAttributes<'col'>>(attrs?: Attrs) => element('col', attrs);
export let del = <Attrs extends RendrAttributes & HTMLElementAttributes<'del'>>(attrs?: Attrs) => element('del', attrs);
export let dfn = <Attrs extends RendrAttributes & HTMLElementAttributes<'dfn'>>(attrs?: Attrs) => element('dfn', attrs);
export let div = <Attrs extends RendrAttributes & HTMLElementAttributes<'div'>>(attrs?: Attrs) => element('div', attrs);
export let img = <Attrs extends RendrAttributes & HTMLElementAttributes<'img'>>(attrs?: Attrs) => element('img', attrs);
export let ins = <Attrs extends RendrAttributes & HTMLElementAttributes<'ins'>>(attrs?: Attrs) => element('ins', attrs);
export let kbd = <Attrs extends RendrAttributes & HTMLElementAttributes<'kbd'>>(attrs?: Attrs) => element('kbd', attrs);
export let map = <Attrs extends RendrAttributes & HTMLElementAttributes<'map'>>(attrs?: Attrs) => element('map', attrs);
export let nav = <Attrs extends RendrAttributes & HTMLElementAttributes<'nav'>>(attrs?: Attrs) => element('nav', attrs);
export let pre = <Attrs extends RendrAttributes & HTMLElementAttributes<'pre'>>(attrs?: Attrs) => element('pre', attrs);
export let sub = <Attrs extends RendrAttributes & HTMLElementAttributes<'sub'>>(attrs?: Attrs) => element('sub', attrs);
export let sup = <Attrs extends RendrAttributes & HTMLElementAttributes<'sup'>>(attrs?: Attrs) => element('sup', attrs);
export let wbr = <Attrs extends RendrAttributes & HTMLElementAttributes<'wbr'>>(attrs?: Attrs) => element('wbr', attrs);
export let abbr = <Attrs extends RendrAttributes & HTMLElementAttributes<'abbr'>>(attrs?: Attrs) => element('abbr', attrs);
export let area = <Attrs extends RendrAttributes & HTMLElementAttributes<'area'>>(attrs?: Attrs) => element('area', attrs);
export let cite = <Attrs extends RendrAttributes & HTMLElementAttributes<'cite'>>(attrs?: Attrs) => element('cite', attrs);
export let code = <Attrs extends RendrAttributes & HTMLElementAttributes<'code'>>(attrs?: Attrs) => element('code', attrs);
export let data = <Attrs extends RendrAttributes & HTMLElementAttributes<'data'>>(attrs?: Attrs) => element('data', attrs);
export let form = <Attrs extends RendrAttributes & HTMLElementAttributes<'form'>>(attrs?: Attrs) => element('form', attrs);
export let main = <Attrs extends RendrAttributes & HTMLElementAttributes<'main'>>(attrs?: Attrs) => element('main', attrs);
export let mark = <Attrs extends RendrAttributes & HTMLElementAttributes<'mark'>>(attrs?: Attrs) => element('mark', attrs);
export let ruby = <Attrs extends RendrAttributes & HTMLElementAttributes<'ruby'>>(attrs?: Attrs) => element('ruby', attrs);
export let samp = <Attrs extends RendrAttributes & HTMLElementAttributes<'samp'>>(attrs?: Attrs) => element('samp', attrs);
export let span = <Attrs extends RendrAttributes & HTMLElementAttributes<'span'>>(attrs?: Attrs) => element('span', attrs);
export let time = <Attrs extends RendrAttributes & HTMLElementAttributes<'time'>>(attrs?: Attrs) => element('time', attrs);
export let aside = <Attrs extends RendrAttributes & HTMLElementAttributes<'aside'>>(attrs?: Attrs) => element('aside', attrs);
export let audio = <Attrs extends RendrAttributes & HTMLElementAttributes<'audio'>>(attrs?: Attrs) => element('audio', attrs);
export let input = <Attrs extends RendrAttributes & HTMLElementAttributes<'input'>>(attrs?: Attrs) => element('input', attrs);
export let button = <Attrs extends RendrAttributes & HTMLElementAttributes<'button'>>(attrs?: Attrs) => element('button', attrs);
export let label = <Attrs extends RendrAttributes & HTMLElementAttributes<'label'>>(attrs?: Attrs) => element('label', attrs);
export let meter = <Attrs extends RendrAttributes & HTMLElementAttributes<'meter'>>(attrs?: Attrs) => element('meter', attrs);
export let small = <Attrs extends RendrAttributes & HTMLElementAttributes<'small'>>(attrs?: Attrs) => element('small', attrs);
export let table = <Attrs extends RendrAttributes & HTMLElementAttributes<'table'>>(attrs?: Attrs) => element('table', attrs);
export let tbody = <Attrs extends RendrAttributes & HTMLElementAttributes<'tbody'>>(attrs?: Attrs) => element('tbody', attrs);
export let tfoot = <Attrs extends RendrAttributes & HTMLElementAttributes<'tfoot'>>(attrs?: Attrs) => element('tfoot', attrs);
export let thead = <Attrs extends RendrAttributes & HTMLElementAttributes<'thead'>>(attrs?: Attrs) => element('thead', attrs);
export let track = <Attrs extends RendrAttributes & HTMLElementAttributes<'track'>>(attrs?: Attrs) => element('track', attrs);
export let video = <Attrs extends RendrAttributes & HTMLElementAttributes<'video'>>(attrs?: Attrs) => element('video', attrs);
export let canvas = <Attrs extends RendrAttributes & HTMLElementAttributes<'canvas'>>(attrs?: Attrs) => element('canvas', attrs);
export let dialog = <Attrs extends RendrAttributes & HTMLElementAttributes<'dialog'>>(attrs?: Attrs) => element('dialog', attrs);
export let figure = <Attrs extends RendrAttributes & HTMLElementAttributes<'figure'>>(attrs?: Attrs) => element('figure', attrs);
export let footer = <Attrs extends RendrAttributes & HTMLElementAttributes<'footer'>>(attrs?: Attrs) => element('footer', attrs);
export let header = <Attrs extends RendrAttributes & HTMLElementAttributes<'header'>>(attrs?: Attrs) => element('header', attrs);
export let iframe = <Attrs extends RendrAttributes & HTMLElementAttributes<'iframe'>>(attrs?: Attrs) => element('iframe', attrs);
export let legend = <Attrs extends RendrAttributes & HTMLElementAttributes<'legend'>>(attrs?: Attrs) => element('legend', attrs);
export let object = <Attrs extends RendrAttributes & HTMLElementAttributes<'object'>>(attrs?: Attrs) => element('object', attrs);
export let option = <Attrs extends RendrAttributes & HTMLElementAttributes<'option'>>(attrs?: Attrs) => element('option', attrs);
export let output = <Attrs extends RendrAttributes & HTMLElementAttributes<'output'>>(attrs?: Attrs) => element('output', attrs);
export let select = <Attrs extends RendrAttributes & HTMLElementAttributes<'select'>>(attrs?: Attrs) => element('select', attrs);
export let source = <Attrs extends RendrAttributes & HTMLElementAttributes<'source'>>(attrs?: Attrs) => element('source', attrs);
export let strong = <Attrs extends RendrAttributes & HTMLElementAttributes<'strong'>>(attrs?: Attrs) => element('strong', attrs);
export let address = <Attrs extends RendrAttributes & HTMLElementAttributes<'address'>>(attrs?: Attrs) => element('address', attrs);
export let article = <Attrs extends RendrAttributes & HTMLElementAttributes<'article'>>(attrs?: Attrs) => element('article', attrs);
export let caption = <Attrs extends RendrAttributes & HTMLElementAttributes<'caption'>>(attrs?: Attrs) => element('caption', attrs);
export let details = <Attrs extends RendrAttributes & HTMLElementAttributes<'details'>>(attrs?: Attrs) => element('details', attrs);
export let section = <Attrs extends RendrAttributes & HTMLElementAttributes<'section'>>(attrs?: Attrs) => element('section', attrs);
export let summary = <Attrs extends RendrAttributes & HTMLElementAttributes<'summary'>>(attrs?: Attrs) => element('summary', attrs);
export let picture = <Attrs extends RendrAttributes & HTMLElementAttributes<'picture'>>(attrs?: Attrs) => element('picture', attrs);
export let colgroup = <Attrs extends RendrAttributes & HTMLElementAttributes<'colgroup'>>(attrs?: Attrs) => element('colgroup', attrs);
export let datalist = <Attrs extends RendrAttributes & HTMLElementAttributes<'datalist'>>(attrs?: Attrs) => element('datalist', attrs);
export let fieldset = <Attrs extends RendrAttributes & HTMLElementAttributes<'fieldset'>>(attrs?: Attrs) => element('fieldset', attrs);
export let optgroup = <Attrs extends RendrAttributes & HTMLElementAttributes<'optgroup'>>(attrs?: Attrs) => element('optgroup', attrs);
export let progress = <Attrs extends RendrAttributes & HTMLElementAttributes<'progress'>>(attrs?: Attrs) => element('progress', attrs);
export let textarea = <Attrs extends RendrAttributes & HTMLElementAttributes<'textarea'>>(attrs?: Attrs) => element('textarea', attrs);
export let blockquote = <Attrs extends RendrAttributes & HTMLElementAttributes<'blockquote'>>(attrs?: Attrs) => element('blockquote', attrs);
export let figcaption = <Attrs extends RendrAttributes & HTMLElementAttributes<'figcaption'>>(attrs?: Attrs) => element('figcaption', attrs);
