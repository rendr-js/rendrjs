import { HTMLElementAttributes, RendrAttributes, SVGElementAttributes, element } from './elem';

// SVG Elements
type SVGAttrs<T extends keyof SVGElementTagNameMap> = RendrAttributes & SVGElementAttributes<T>;
export let svg = (attrs?: SVGAttrs<'svg'>) => element('svg', attrs);
export let rect = (attrs?: SVGAttrs<'rect'>) => element('rect', attrs);
export let animate = (attrs?: SVGAttrs<'animate'>) => element('animate', attrs);
export let animateMotion = (attrs?: SVGAttrs<'animateMotion'>) => element('animateMotion', attrs);
export let animateTransform = (attrs?: SVGAttrs<'animateTransform'>) => element('animateTransform', attrs);
export let circle = (attrs?: SVGAttrs<'circle'>) => element('circle', attrs);
export let clipPath = (attrs?: SVGAttrs<'clipPath'>) => element('clipPath', attrs);
export let defs = (attrs?: SVGAttrs<'defs'>) => element('defs', attrs);
export let desc = (attrs?: SVGAttrs<'desc'>) => element('desc', attrs);
export let ellipse = (attrs?: SVGAttrs<'ellipse'>) => element('ellipse', attrs);
export let feBlend = (attrs?: SVGAttrs<'feBlend'>) => element('feBlend', attrs);
export let feColorMatrix = (attrs?: SVGAttrs<'feColorMatrix'>) => element('feColorMatrix', attrs);
export let feComponentTransfer = (attrs?: SVGAttrs<'feComponentTransfer'>) => element('feComponentTransfer', attrs);
export let feComposite = (attrs?: SVGAttrs<'feComposite'>) => element('feComposite', attrs);
export let feConvolveMatrix = (attrs?: SVGAttrs<'feConvolveMatrix'>) => element('feConvolveMatrix', attrs);
export let feDiffuseLighting = (attrs?: SVGAttrs<'feDiffuseLighting'>) => element('feDiffuseLighting', attrs);
export let feDisplacementMap = (attrs?: SVGAttrs<'feDisplacementMap'>) => element('feDisplacementMap', attrs);
export let feDistantLight = (attrs?: SVGAttrs<'feDistantLight'>) => element('feDistantLight', attrs);
export let feDropShadow = (attrs?: SVGAttrs<'feDropShadow'>) => element('feDropShadow', attrs);
export let feFlood = (attrs?: SVGAttrs<'feFlood'>) => element('feFlood', attrs);
export let feFuncA = (attrs?: SVGAttrs<'feFuncA'>) => element('feFuncA', attrs);
export let feFuncB = (attrs?: SVGAttrs<'feFuncB'>) => element('feFuncB', attrs);
export let feFuncG = (attrs?: SVGAttrs<'feFuncG'>) => element('feFuncG', attrs);
export let feFuncR = (attrs?: SVGAttrs<'feFuncR'>) => element('feFuncR', attrs);
export let feGaussianBlur = (attrs?: SVGAttrs<'feGaussianBlur'>) => element('feGaussianBlur', attrs);
export let feImage = (attrs?: SVGAttrs<'feImage'>) => element('feImage', attrs);
export let feMerge = (attrs?: SVGAttrs<'feMerge'>) => element('feMerge', attrs);
export let feMergeNode = (attrs?: SVGAttrs<'feMergeNode'>) => element('feMergeNode', attrs);
export let feMorphology = (attrs?: SVGAttrs<'feMorphology'>) => element('feMorphology', attrs);
export let feOffset = (attrs?: SVGAttrs<'feOffset'>) => element('feOffset', attrs);
export let fePointLight = (attrs?: SVGAttrs<'fePointLight'>) => element('fePointLight', attrs);
export let feSpecularLighting = (attrs?: SVGAttrs<'feSpecularLighting'>) => element('feSpecularLighting', attrs);
export let feSpotLight = (attrs?: SVGAttrs<'feSpotLight'>) => element('feSpotLight', attrs);
export let feTile = (attrs?: SVGAttrs<'feTile'>) => element('feTile', attrs);
export let feTurbulence = (attrs?: SVGAttrs<'feTurbulence'>) => element('feTurbulence', attrs);
export let filter = (attrs?: SVGAttrs<'filter'>) => element('filter', attrs);
export let foreignObject = (attrs?: SVGAttrs<'foreignObject'>) => element('foreignObject', attrs);
export let g = (attrs?: SVGAttrs<'g'>) => element('g', attrs);
export let image = (attrs?: SVGAttrs<'image'>) => element('image', attrs);
export let line = (attrs?: SVGAttrs<'line'>) => element('line', attrs);
export let linearGradient = (attrs?: SVGAttrs<'linearGradient'>) => element('linearGradient', attrs);
export let marker = (attrs?: SVGAttrs<'marker'>) => element('marker', attrs);
export let mask = (attrs?: SVGAttrs<'mask'>) => element('mask', attrs);
export let metadata = (attrs?: SVGAttrs<'metadata'>) => element('metadata', attrs);
export let mpath = (attrs?: SVGAttrs<'mpath'>) => element('mpath', attrs);
export let path = (attrs?: SVGAttrs<'path'>) => element('path', attrs);
export let pattern = (attrs?: SVGAttrs<'pattern'>) => element('pattern', attrs);
export let polygon = (attrs?: SVGAttrs<'polygon'>) => element('polygon', attrs);
export let polyline = (attrs?: SVGAttrs<'polyline'>) => element('polyline', attrs);
export let radialGradient = (attrs?: SVGAttrs<'radialGradient'>) => element('radialGradient', attrs);
export let script = (attrs?: SVGAttrs<'script'>) => element('script', attrs);
export let set = (attrs?: SVGAttrs<'set'>) => element('set', attrs);
export let stop = (attrs?: SVGAttrs<'stop'>) => element('stop', attrs);
export let style = (attrs?: SVGAttrs<'style'>) => element('style', attrs);
export let symbol = (attrs?: SVGAttrs<'symbol'>) => element('symbol', attrs);
export let text = (attrs?: SVGAttrs<'text'>) => element('text', attrs);
export let textPath = (attrs?: SVGAttrs<'textPath'>) => element('textPath', attrs);
export let title = (attrs?: SVGAttrs<'title'>) => element('title', attrs);
export let tspan = (attrs?: SVGAttrs<'tspan'>) => element('tspan', attrs);
export let use = (attrs?: SVGAttrs<'use'>) => element('use', attrs);
export let view = (attrs?: SVGAttrs<'view'>) => element('view', attrs);

// HTML elements
type HTMLAttrs<T extends keyof HTMLElementTagNameMap> = (RendrAttributes & HTMLElementAttributes<T>) | string;
export let a = (attrs?: HTMLAttrs<'a'>) => element('a', attrs);
export let b = (attrs?: HTMLAttrs<'b'>) => element('b', attrs);
export let i = (attrs?: HTMLAttrs<'i'>) => element('i', attrs);
export let p = (attrs?: HTMLAttrs<'p'>) => element('p', attrs);
export let q = (attrs?: HTMLAttrs<'q'>) => element('q', attrs);
export let s = (attrs?: HTMLAttrs<'s'>) => element('s', attrs);
export let br = (attrs?: HTMLAttrs<'br'>) => element('br', attrs);
export let dd = (attrs?: HTMLAttrs<'dd'>) => element('dd', attrs);
export let dl = (attrs?: HTMLAttrs<'dl'>) => element('dl', attrs);
export let dt = (attrs?: HTMLAttrs<'dt'>) => element('dt', attrs);
export let em = (attrs?: HTMLAttrs<'em'>) => element('em', attrs);
export let h1 = (attrs?: HTMLAttrs<'h1'>) => element('h1', attrs);
export let h2 = (attrs?: HTMLAttrs<'h2'>) => element('h2', attrs);
export let h3 = (attrs?: HTMLAttrs<'h3'>) => element('h3', attrs);
export let h4 = (attrs?: HTMLAttrs<'h4'>) => element('h4', attrs);
export let h5 = (attrs?: HTMLAttrs<'h5'>) => element('h5', attrs);
export let h6 = (attrs?: HTMLAttrs<'h6'>) => element('h6', attrs);
export let hr = (attrs?: HTMLAttrs<'hr'>) => element('hr', attrs);
export let li = (attrs?: HTMLAttrs<'li'>) => element('li', attrs);
export let ol = (attrs?: HTMLAttrs<'ol'>) => element('ol', attrs);
export let rp = (attrs?: HTMLAttrs<'rp'>) => element('rp', attrs);
export let rt = (attrs?: HTMLAttrs<'rt'>) => element('rt', attrs);
export let td = (attrs?: HTMLAttrs<'td'>) => element('td', attrs);
export let th = (attrs?: HTMLAttrs<'th'>) => element('th', attrs);
export let tr = (attrs?: HTMLAttrs<'tr'>) => element('tr', attrs);
export let ul = (attrs?: HTMLAttrs<'ul'>) => element('ul', attrs);
export let bdi = (attrs?: HTMLAttrs<'bdi'>) => element('bdi', attrs);
export let bdo = (attrs?: HTMLAttrs<'bdo'>) => element('bdo', attrs);
export let col = (attrs?: HTMLAttrs<'col'>) => element('col', attrs);
export let del = (attrs?: HTMLAttrs<'del'>) => element('del', attrs);
export let dfn = (attrs?: HTMLAttrs<'dfn'>) => element('dfn', attrs);
export let div = (attrs?: HTMLAttrs<'div'>) => element('div', attrs);
export let img = (attrs?: HTMLAttrs<'img'>) => element('img', attrs);
export let ins = (attrs?: HTMLAttrs<'ins'>) => element('ins', attrs);
export let kbd = (attrs?: HTMLAttrs<'kbd'>) => element('kbd', attrs);
export let map = (attrs?: HTMLAttrs<'map'>) => element('map', attrs);
export let nav = (attrs?: HTMLAttrs<'nav'>) => element('nav', attrs);
export let pre = (attrs?: HTMLAttrs<'pre'>) => element('pre', attrs);
export let sub = (attrs?: HTMLAttrs<'sub'>) => element('sub', attrs);
export let sup = (attrs?: HTMLAttrs<'sup'>) => element('sup', attrs);
export let wbr = (attrs?: HTMLAttrs<'wbr'>) => element('wbr', attrs);
export let abbr = (attrs?: HTMLAttrs<'abbr'>) => element('abbr', attrs);
export let area = (attrs?: HTMLAttrs<'area'>) => element('area', attrs);
export let cite = (attrs?: HTMLAttrs<'cite'>) => element('cite', attrs);
export let code = (attrs?: HTMLAttrs<'code'>) => element('code', attrs);
export let data = (attrs?: HTMLAttrs<'data'>) => element('data', attrs);
export let form = (attrs?: HTMLAttrs<'form'>) => element('form', attrs);
export let main = (attrs?: HTMLAttrs<'main'>) => element('main', attrs);
export let mark = (attrs?: HTMLAttrs<'mark'>) => element('mark', attrs);
export let ruby = (attrs?: HTMLAttrs<'ruby'>) => element('ruby', attrs);
export let samp = (attrs?: HTMLAttrs<'samp'>) => element('samp', attrs);
export let span = (attrs?: HTMLAttrs<'span'>) => element('span', attrs);
export let time = (attrs?: HTMLAttrs<'time'>) => element('time', attrs);
export let aside = (attrs?: HTMLAttrs<'aside'>) => element('aside', attrs);
export let audio = (attrs?: HTMLAttrs<'audio'>) => element('audio', attrs);
export let input = (attrs?: HTMLAttrs<'input'>) => element('input', attrs);
export let button = (attrs?: HTMLAttrs<'button'>) => element('button', attrs);
export let label = (attrs?: HTMLAttrs<'label'>) => element('label', attrs);
export let meter = (attrs?: HTMLAttrs<'meter'>) => element('meter', attrs);
export let small = (attrs?: HTMLAttrs<'small'>) => element('small', attrs);
export let table = (attrs?: HTMLAttrs<'table'>) => element('table', attrs);
export let tbody = (attrs?: HTMLAttrs<'tbody'>) => element('tbody', attrs);
export let tfoot = (attrs?: HTMLAttrs<'tfoot'>) => element('tfoot', attrs);
export let thead = (attrs?: HTMLAttrs<'thead'>) => element('thead', attrs);
export let track = (attrs?: HTMLAttrs<'track'>) => element('track', attrs);
export let video = (attrs?: HTMLAttrs<'video'>) => element('video', attrs);
export let canvas = (attrs?: HTMLAttrs<'canvas'>) => element('canvas', attrs);
export let dialog = (attrs?: HTMLAttrs<'dialog'>) => element('dialog', attrs);
export let figure = (attrs?: HTMLAttrs<'figure'>) => element('figure', attrs);
export let footer = (attrs?: HTMLAttrs<'footer'>) => element('footer', attrs);
export let header = (attrs?: HTMLAttrs<'header'>) => element('header', attrs);
export let iframe = (attrs?: HTMLAttrs<'iframe'>) => element('iframe', attrs);
export let legend = (attrs?: HTMLAttrs<'legend'>) => element('legend', attrs);
export let object = (attrs?: HTMLAttrs<'object'>) => element('object', attrs);
export let option = (attrs?: HTMLAttrs<'option'>) => element('option', attrs);
export let output = (attrs?: HTMLAttrs<'output'>) => element('output', attrs);
export let select = (attrs?: HTMLAttrs<'select'>) => element('select', attrs);
export let source = (attrs?: HTMLAttrs<'source'>) => element('source', attrs);
export let strong = (attrs?: HTMLAttrs<'strong'>) => element('strong', attrs);
export let address = (attrs?: HTMLAttrs<'address'>) => element('address', attrs);
export let article = (attrs?: HTMLAttrs<'article'>) => element('article', attrs);
export let caption = (attrs?: HTMLAttrs<'caption'>) => element('caption', attrs);
export let details = (attrs?: HTMLAttrs<'details'>) => element('details', attrs);
export let section = (attrs?: HTMLAttrs<'section'>) => element('section', attrs);
export let summary = (attrs?: HTMLAttrs<'summary'>) => element('summary', attrs);
export let picture = (attrs?: HTMLAttrs<'picture'>) => element('picture', attrs);
export let colgroup = (attrs?: HTMLAttrs<'colgroup'>) => element('colgroup', attrs);
export let datalist = (attrs?: HTMLAttrs<'datalist'>) => element('datalist', attrs);
export let fieldset = (attrs?: HTMLAttrs<'fieldset'>) => element('fieldset', attrs);
export let optgroup = (attrs?: HTMLAttrs<'optgroup'>) => element('optgroup', attrs);
export let progress = (attrs?: HTMLAttrs<'progress'>) => element('progress', attrs);
export let textarea = (attrs?: HTMLAttrs<'textarea'>) => element('textarea', attrs);
export let blockquote = (attrs?: HTMLAttrs<'blockquote'>) => element('blockquote', attrs);
export let figcaption = (attrs?: HTMLAttrs<'figcaption'>) => element('figcaption', attrs);
